AddTwoNumbers //解决两个数字相加问题，实际上是链表思想
//解决这道题就简单的就是遍历两个链表，相加。需要注意的地方就是进位问题。
//力扣官方的这道题解法真的把最简单的思想表达的淋漓尽致，请欣赏
public ListNode addTwoNumbers(ListNode l1,ListNode l2){
ListNode dummyHead = new ListNode(0);
ListNode p = l1, q = l2, curr = dummyHead; //curr是为了操作结果链表dummyHead而设
int carry = 0;  //进位
while(p!=null||q!=null){
    int x=(p!=null)?p.val:0;  //如果p不为空，给x赋值p.val，否则赋值0
    int y=(q!=null)?q.val:0;
    int sum=carry+x+y;
    carry=sum/10; //进位注意是除法
    curr.next=new ListNode(sum%10); //为当前求和的值请求空间，注意是取模
    curr=curr.next; //让curr指向当前结点，注意curr慢我们求和结点一拍
    if(p!=null) p=p.next; //最后判断p是否已经到链表尾了，如果没有就接着下一个继续循环
    if(q!=null) q=q.next;
}
if(carry>0){
    curr.next=new ListNode(carry); //循环完成以后一定要判断进位carry是否大于1，如果是就加curr.next上
}
return dummyHead.next; //返回结点地址
}

//看到一个网友的进化思路，只维护一个进位t变量
//实际上并没有在时间空间上面有进步，但是代码更加优美一些
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(-1), pre = dummyHead;
        int t = 0;
        while (l1 != null || l2 != null || t != 0) {
            if (l1 != null) {
                t += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                t += l2.val;
                l2 = l2.next;
            }
            pre.next = new ListNode(t % 10);
            pre = pre.next;
            t /= 10;
        }

        return dummyHead.next;
    }
}
