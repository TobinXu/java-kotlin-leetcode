//LeetCode160题是求解两个单链表的第一个交点的问题
//注意两个单链表一旦遇到交点，那么后面的结点值都一样，否则就会产生第一个交点后面连接两条不同的链表路线，与一个结点后面只有一个结点违背
//评价这条算法：这个算法也浪漫了吧，错的人迟早会走散，而对的人迟早会相逢！
思想：
设 A 的长度为 a + c，B 的长度为 b + c，其中 c 为尾部公共部分长度，可知 a + c + b = b + c + a。

当访问 A 链表的指针访问到链表尾部时，令它从链表 B 的头部开始访问链表 B；同样地，当访问 B 链表的指针访问到链表尾部时，
令它从链表 A 的头部开始访问链表 A。这样就能控制访问 A 和 B 两个链表的指针能同时访问到交点。

如果不存在交点，那么 a + b = b + a，以下实现代码中 l1 和 l2 会同时为 null，从而退出循环。

思路：
创建两个指针 pApA 和 pBpB，分别初始化为链表 A 和 B 的头结点。然后让它们向后逐结点遍历。
当 pApA 到达链表的尾部时，将它重定位到链表 B 的头结点 (你没看错，就是链表 B); 类似的，当 pBpB 到达链表的尾部时，将它重定位到链表 A 的头结点。
若在某一时刻 pApA 和 pBpB 相遇，则 pApA/pBpB 为相交结点
想弄清楚为什么这样可行, 可以考虑以下两个链表: A={1,3,5,7,9,11} 和 B={2,4,9,11}，相交于结点 9。 由于 B.length (=4) < A.length (=6)，pBpB
比 pApA 少经过 22 个结点，会先到达尾部。将 pBpB 重定向到 A 的头结点，pApA 重定向到 B 的头结点后，pBpB 要比 pApA 多走 2 个结点。
因此，它们会同时到达交点。


public ListNode getIntersectionNode(ListNode headA,ListNode headB){
    ListNode l1=headA,l2=headB;
    while(l1!=l2){
        l1=(l1==null)?headB:l1.next;
        l2=(l2==null)?headA:l2.next;
    }
    return l1;
}
