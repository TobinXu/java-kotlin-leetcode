//质数是除了1和它本身其他的数字都除不尽，我们能想到的就是直接遍历一个个比较
//稍微进一步可以想到x如果有质因数（除自身以外）也只能在x/2以内

function IsPrime(N){
    var arr=[2,3];
    for (var i = 4; i < N; i++) {
        var flag = true; //标志位
        for (var j = 2; j < =i / 2; j++) {
            if (i % j == 0){
                flag = false; //如果可以除尽就不是质数，标志位赋值false
                break;  //如果发现不是立刻跳出
            }
        }
        if (flag) { //如果flag为ture说明是质数，放到数组里面
            arr.push(i);
        }
    }
    console.log(arr);
    }
    
    
//更进一步思考这个问题发现，我们求一个数字是否为质数，判断它的因数都是成对出现的
//比如100的因数，1/100,2/50,4/25,5/20。注意每一对数字中都有一个是小于Math.sqrt(100)的
//所以我们只用判断，一个数字x是否能把2到Math.sqrt(x)之前的数字整数
//如果可以就不是质数，这里只用更改一下内部判断条件
function IsPrime(N){
    var arr=[2,3];

    for(var i=4;i<N;i++){
        var flag=true;
        for(var j=2;j<=Math.sqrt(i);j++){
            if(i%j==0){
                flag=false;
                break;
            }
        }
        if(flag){
            arr.push(i);
        }
    }
    console.log(arr);
    console.log(arr.length);
}

IsPrime(1000);




//java实现
package com.byteDance;


public class IsPrime {
	public static void main(String args[]) {
		int N=1000;
		int count=0;
		for(int i=2;i<N;i++) {
			int flag=1;
			for(int j=2;j<=i/2;j++) {
				if(i%j==0) {
					flag=0;
					break;
				}
			}
			if(flag==1) {
				count++;
				System.out.print(i+" ");
			}
		}

		System.out.println();
		System.out.print(count);
	}

}


改进
package com.byteDance;


public class IsPrime {
	public static void main(String args[]) {
		int N=1000;
		int count=0;
		for(int i=2;i<N;i++) {
			int flag=1;
			for(int j=2;j<=Math.sqrt(i);j++) {
				if(i%j==0) {
					flag=0;
					break;
				}
			}
			if(flag==1) {
				count++;
				System.out.print(i+" ");
			}
		}

		System.out.println();
		System.out.print(count);
	}

}


