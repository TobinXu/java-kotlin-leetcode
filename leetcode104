这道题求 树的高度
运用递归思想：
1.整个递归的终止条件
2.一级递归需要做什么？
3.应该返回给上一级的返回值是什么？
解决方法：
1.找整个递归终止的条件：递归应该什么时候结束？
2.找返回值：应该给上一级返回什么信息？
3.本递归应该作什么：在这一级递归中，应该完成什么任务？

应用实例：
1.找终止条件。 什么情况下递归结束？当然是树为空的时候，此时树的深度为0，递归就结束了。
2.找返回值。 应该返回什么？题目求的是树的最大深度，我们需要从每一级得到的信息自然是当前这一级对应的树的最大深度，
因此我们的返回值应该是当前树的最大深度，这一步可以结合第三步来看。
3.本级递归应该做什么。 首先，还是强调要走出之前的思维误区，递归后我们眼里的树一定是这个样子的，看下图。此时就三个节点：
root、root.left、root.right，其中根据第二步，root.left和root.right分别记录的是root的左右子树的最大深度。那么本级递归应
该做什么就很明确了，自然就是在root的左右子树中选择较大的一个，再加上1就是以root为根的子树的最大深度了，然后再返回这个深度即可。

class Solution {
    public int maxDepth(TreeNode root) {
        //终止条件：当树为空时结束递归，并返回当前深度0
        if(root == null){
            return 0;
        }
        //root的左、右子树的最大深度
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        //返回的是左右子树的最大深度+1
        return Math.max(leftDepth, rightDepth) + 1;
    }
}





public int maxDepth(TreeNode root){
if(root==null)return 0;
return Math.max(maxDepth(root.left),maxDepth(root.right))+1;
