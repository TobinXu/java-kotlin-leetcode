给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。

//思路，最大值不一定包含根节点，但是一定是：经过一个节点，该节点左右子树的最大深度之和 +1+1（二叉树的根节点深度为 00）
于是，可以使用 DFS，找出所有节点的最大直径，在取出最大值 res
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
 int max=0;
    public int diameterOfBinaryTree(TreeNode root) {
        
         maxDepth(root);
        return max;
    }
    // 函数dfs的作用是：找到以root为根节点的二叉树的最大深度

    public int maxDepth(TreeNode root){
        if(root==null)return 0;
        int l=maxDepth(root.left);
        int r=maxDepth(root.right);
        max=Math.max(max,l+r);//将每个节点最大直径(左子树深度+右子树深度)当前最大值比较并取大者
        return Math.max(l,r)+1;//返回结点深度
    }
}
