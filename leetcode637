给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.

思路：广度优先搜索，队列，两层while循环，第一次循环遍历层，第二次循环遍历每层的元素

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 class Solution{
public List<Double> averageOfLevels(TreeNode root){
		List<Double> res = new ArrayList<>();
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		while(!queue.isEmpty()){
			//外层while循环用于遍历层，判断的逻辑是：只要queue非空，那就证明至少还有一层没有遍历到
			long sum = 0;
			long count = 0;
			Queue<TreeNode> temp = new LinkedList<>();
			while(!queue.isEmpty()){
				//内层while循环用于遍历本层的每个结点
				TreeNode n = queue.remove();//一个结点出队列
				sum += n.val;
				count++;
				//将当前结点的左右孩子加入队列temp
				if(n.left!=null){
					temp.add(n.left);
				}
				if(n.right!=null){
					temp.add(n.right);
				}
			}
			/*
			 * 本层结点遍历结束,queue中为空，temp中保存的是下一层的结点;
			 * 将temp传给queue，外层while循环遍历下一层结点
			 */
			queue = temp;
			//将本层的平均值加入res数组
			res.add(sum*1.0/count);
		}
		return res;
	}
}


使用 BFS 进行层次遍历。不需要使用两个队列来分别存储当前层的节点和下一层的节点，因为在开始遍历一层的节点时，
当前队列中的节点数就是当前层的节点数，只要控制遍历这么多节点数，就能保证这次遍历的都是当前层的节点。
public List<Double> averageOfLevels(TreeNode root) {
    List<Double> ret = new ArrayList<>();
    if (root == null) return ret;
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        int cnt = queue.size();
        double sum = 0;
        for (int i = 0; i < cnt; i++) {
            TreeNode node = queue.poll();
            sum += node.val;
            if (node.left != null) queue.add(node.left);
            if (node.right != null) queue.add(node.right);
        }
        ret.add(sum / cnt);
    }
    return ret;
}

