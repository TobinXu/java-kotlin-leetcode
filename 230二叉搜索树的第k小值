给一个二叉搜索树，找到树中第 k 小的树。二叉搜索树的定义如下：

1.若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；
2.若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；
3.任意节点的左、右子树也分别为二叉查找树；
4.没有键值相等的节点。

思路：看到二叉搜索树，应该会立刻想到它的一个性质，它的中序遍历输出的是一个升序数组。
知道了这个，这道题就很简单了，只需要把中序遍历的第 k 个元素返回即可。

递归法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int num=0;
    int res;
    public int kthSmallest(TreeNode root, int k) {
        inorderTraversal(root,k);
        return res;
    }
    private void inorderTraversal(TreeNode node,int k){
        if(node==null){
            return;
        }
        inorderTraversal(node.left,k);
        num++;
        if(num==k){
            res=node.val;
            return;
        
        }
        inorderTraversal(node.right,k);
    }
}


递归改写，压栈法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root,int k){
        Stack<TreeNode> stack=new Stack<>();
        int num=0;
        int res=-1;
        TreeNode cur=root;
        while(cur!=null||!stack.isEmpty()){
            //节点不为空一直压栈
            while(cur!=null){
                stack.push(cur);
                cur=cur.left;//考虑左子树
            }
            //节点为空，就出栈
            cur=stack.pop();
            //当前值加入
            num++;
            if(num==k){
                res=cur.val;
                break;
            }
            //考虑右子树
            cur=cur.right;
        }
        return res;
    }
}
