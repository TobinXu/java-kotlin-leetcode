加入前面已经是有序数组，然后从后面的元素，一个一个插入到前面的有序数组中。

对于数组 {3, 5, 2, 4, 1}，它具有以下逆序：(3, 2), (3, 1), (5, 2), (5, 4), (5, 1), (2, 1), (4, 1)，
插入排序每次只能交换相邻元素，令逆序数量减少 1，因此插入排序需要交换的次数为逆序数量。

插入排序的时间复杂度取决于数组的初始顺序，如果数组已经部分有序了，那么逆序较少，需要的交换次数也就较少，时间复杂度较低。

平均情况下插入排序需要 ~N2/4 比较以及 ~N2/4 次交换；
最坏的情况下需要 ~N2/2 比较以及 ~N2/2 次交换，最坏的情况是数组是倒序的；
最好的情况下需要 N-1 次比较和 0 次交换，最好的情况就是数组已经有序了。


// 插入排序
function InsertSort(nums) {
    var N = nums.length;
    var temp;
    for (let i = 0; i < N; i++) {

        for (let j = i; j > 0 && nums[j] < nums[j - 1]; j--) {
            temp = nums[j-1];
            nums[j-1] = nums[j];
            nums[j] = temp;
        }
    }
    console.log(nums);
}
var k = [2,1,8,4,6,7,3];
InsertSort(k);
